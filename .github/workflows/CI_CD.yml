name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  ci_pipeline:
    runs-on: self-hosted

    env:
      CI_COMMIT_MESSAGE: "Continuous Integration Build Artifacts"
      CI_COMMIT_AUTHOR: "Continuous Integration"
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache virtualenv
        uses: actions/cache@v3
        with:
          path: ~/myenv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install 'dvc[s3]'
          pip install --upgrade "zenml[server]==0.90.0"
          pip show zenml

      - name: Check DVC version and pull existing model
        run: |
          dvc --version
          dvc remote list
          dvc pull saved_model/model.pkl || echo "No existing model found to pull."

      - name: Train and Evaluate model (only if model doesn't exist)
        run: |
          if [ ! -f saved_model/model.pkl ]; then
            echo "No model found. Training new model..."
            python run_pipeline.py --load-data --path "data/SMSSpamCollection"
            if success(); then
              python run_pipeline.py --train-model --num-epochs 1 --num-of-labels 1 --learning-rate 0.00001
            if training_success; then
             python run_pipeline.py --evaluate-model
             echo "Model evaluated successfully.."
          else
            echo "Model already exists. Skipping training."
          fi

      - name: Accuracy check
        run: |
          python accuracy.py
          if [ -f accuracy.txt ]; then
            git config --global user.name "${CI_COMMIT_AUTHOR}"
            git config --global user.email "abinashdevendran@gmail.com"
            git add accuracy.txt
            git commit -m "${CI_COMMIT_MESSAGE}" || echo "No changes to commit"
            git push
          fi

      - name: Threshold check
        run: |
          accuracy=$(cat accuracy.txt)
          threshold=0.90
          echo "accuracy=$accuracy" >> $GITHUB_OUTPUT
          if (( $(echo "$accuracy < $threshold" | bc -l) )); then
            echo "Model accuracy $accuracy is below threshold $threshold. Failing..."
            exit 1
          else
            echo "Model accuracy $accuracy meets threshold $threshold."
          fi

      - name: Configure and track model with DVC
        if: success()
        run: |
          if [ -f saved_model/model.pkl ]; then
            dvc add saved_model/model.pkl
          fi

      - name: Commit and push DVC changes only if model changed
        if: success()
        run: |
          git config --global user.name "${CI_COMMIT_AUTHOR}"
          git config --global user.email "abinashdevendran@gmail.com"
          git add saved_model/model.pkl.dvc saved_model/.gitignore
          if ! git diff --cached --quiet; then
            echo "Changes detected in model. Committing..."
            git commit -m "${CI_COMMIT_MESSAGE}"
            git push
          else
            echo "No changes in model. Skipping commit."
          fi
          dvc push

  cd_pipeline:
    runs-on: self-hosted
    needs: ci_pipeline

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install Python and DVC
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-venv
          python3 -m pip install --upgrade pip
          pip install dvc[s3]

      - name: Get model from DVC
        run: |
          dvc pull saved_model/model.pkl
          ls -lh saved_model/

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Pull latest image and cleanup old containers/images
        run: |
          docker rm -f $(docker ps -q) || true
          docker rmi $(docker images -q) || true
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Run Docker container
        run: |
          docker run -d -p 8000:8000 \
            --name spam_classifier \
            -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e AWS_REGION='${{ secrets.AWS_REGION }}' \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Cleanup local artifacts and prune Docker system
        run: |
          rm -f model.pkl
          docker system prune -f
